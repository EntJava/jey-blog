[DEBUG] 2020-04-06 09:30:43.582 [http-nio-8080-exec-2] IntegratorServiceImpl - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
[DEBUG] 2020-04-06 09:30:43.586 [http-nio-8080-exec-2] IntegratorServiceImpl - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
[DEBUG] 2020-04-06 09:30:43.591 [http-nio-8080-exec-2] IntegratorServiceImpl - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
[INFO ] 2020-04-06 09:30:43.661 [http-nio-8080-exec-2] Version - HHH000412: Hibernate Core {5.4.4.Final}
[DEBUG] 2020-04-06 09:30:43.664 [http-nio-8080-exec-2] Environment - HHH000206: hibernate.properties not found
[DEBUG] 2020-04-06 09:30:43.780 [http-nio-8080-exec-2] LocalXmlResourceResolver - Interpreting public/system identifier : [-//Hibernate/Hibernate Configuration DTD//EN] - [http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd]
[DEBUG] 2020-04-06 09:30:43.780 [http-nio-8080-exec-2] LocalXmlResourceResolver - Recognized hibernate-configuration identifier; attempting to resolve on classpath under org/hibernate/
[DEBUG] 2020-04-06 09:30:43.802 [http-nio-8080-exec-2] JaxbCfgProcessor - cfg.xml document did not define namespaces; wrapping in custom event reader to introduce namespace information
[DEBUG] 2020-04-06 09:30:44.075 [http-nio-8080-exec-2] ServiceBinding - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
[DEBUG] 2020-04-06 09:30:44.093 [http-nio-8080-exec-2] RegionFactoryInitiator - Cannot default RegionFactory based on registered strategies as `[]` RegionFactory strategies were registered
[DEBUG] 2020-04-06 09:30:44.094 [http-nio-8080-exec-2] RegionFactoryInitiator - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
[INFO ] 2020-04-06 09:30:44.114 [http-nio-8080-exec-2] Version - HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
[DEBUG] 2020-04-06 09:30:44.143 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@8db2b2b
[DEBUG] 2020-04-06 09:30:44.143 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration boolean -> org.hibernate.type.BooleanType@8db2b2b
[DEBUG] 2020-04-06 09:30:44.143 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@8db2b2b
[DEBUG] 2020-04-06 09:30:44.144 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@2c7410d1
[DEBUG] 2020-04-06 09:30:44.144 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration true_false -> org.hibernate.type.TrueFalseType@693d3d6b
[DEBUG] 2020-04-06 09:30:44.144 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration yes_no -> org.hibernate.type.YesNoType@6df6618a
[DEBUG] 2020-04-06 09:30:44.145 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@40dd004f
[DEBUG] 2020-04-06 09:30:44.145 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration byte -> org.hibernate.type.ByteType@40dd004f
[DEBUG] 2020-04-06 09:30:44.145 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@40dd004f
[DEBUG] 2020-04-06 09:30:44.146 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration character -> org.hibernate.type.CharacterType@7578b1d4
[DEBUG] 2020-04-06 09:30:44.146 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration char -> org.hibernate.type.CharacterType@7578b1d4
[DEBUG] 2020-04-06 09:30:44.146 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@7578b1d4
[DEBUG] 2020-04-06 09:30:44.147 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@281f7ae5
[DEBUG] 2020-04-06 09:30:44.147 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration short -> org.hibernate.type.ShortType@281f7ae5
[DEBUG] 2020-04-06 09:30:44.147 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@281f7ae5
[DEBUG] 2020-04-06 09:30:44.148 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration integer -> org.hibernate.type.IntegerType@616a0efb
[DEBUG] 2020-04-06 09:30:44.148 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration int -> org.hibernate.type.IntegerType@616a0efb
[DEBUG] 2020-04-06 09:30:44.148 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@616a0efb
[DEBUG] 2020-04-06 09:30:44.149 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@11e57e1c
[DEBUG] 2020-04-06 09:30:44.149 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration long -> org.hibernate.type.LongType@11e57e1c
[DEBUG] 2020-04-06 09:30:44.149 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Long -> org.hibernate.type.LongType@11e57e1c
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@595e1e00
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration float -> org.hibernate.type.FloatType@595e1e00
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@595e1e00
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@ee95743
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration double -> org.hibernate.type.DoubleType@ee95743
[DEBUG] 2020-04-06 09:30:44.150 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@ee95743
[DEBUG] 2020-04-06 09:30:44.151 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@5ba25391
[DEBUG] 2020-04-06 09:30:44.151 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@5ba25391
[DEBUG] 2020-04-06 09:30:44.152 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@123d8a47
[DEBUG] 2020-04-06 09:30:44.152 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@123d8a47
[DEBUG] 2020-04-06 09:30:44.152 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration string -> org.hibernate.type.StringType@263f17b6
[DEBUG] 2020-04-06 09:30:44.152 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.String -> org.hibernate.type.StringType@263f17b6
[DEBUG] 2020-04-06 09:30:44.153 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@4b902042
[DEBUG] 2020-04-06 09:30:44.153 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@1f4976b8
[DEBUG] 2020-04-06 09:30:44.154 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration url -> org.hibernate.type.UrlType@5c53f2a3
[DEBUG] 2020-04-06 09:30:44.154 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.net.URL -> org.hibernate.type.UrlType@5c53f2a3
[DEBUG] 2020-04-06 09:30:44.155 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration Duration -> org.hibernate.type.DurationType@bd36478
[DEBUG] 2020-04-06 09:30:44.155 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@bd36478
[DEBUG] 2020-04-06 09:30:44.158 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration Instant -> org.hibernate.type.InstantType@47dedfab
[DEBUG] 2020-04-06 09:30:44.158 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@47dedfab
[DEBUG] 2020-04-06 09:30:44.159 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@50ce7147
[DEBUG] 2020-04-06 09:30:44.159 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@50ce7147
[DEBUG] 2020-04-06 09:30:44.160 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@2527d154
[DEBUG] 2020-04-06 09:30:44.160 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@2527d154
[DEBUG] 2020-04-06 09:30:44.161 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@7912b2a1
[DEBUG] 2020-04-06 09:30:44.161 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@7912b2a1
[DEBUG] 2020-04-06 09:30:44.162 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@1688c39d
[DEBUG] 2020-04-06 09:30:44.162 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@1688c39d
[DEBUG] 2020-04-06 09:30:44.163 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@3718ea0c
[DEBUG] 2020-04-06 09:30:44.163 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@3718ea0c
[DEBUG] 2020-04-06 09:30:44.164 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@16e8eed6
[DEBUG] 2020-04-06 09:30:44.164 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@16e8eed6
[DEBUG] 2020-04-06 09:30:44.165 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration date -> org.hibernate.type.DateType@4771490a
[DEBUG] 2020-04-06 09:30:44.166 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.Date -> org.hibernate.type.DateType@4771490a
[DEBUG] 2020-04-06 09:30:44.167 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration time -> org.hibernate.type.TimeType@14dfdb34
[DEBUG] 2020-04-06 09:30:44.167 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@14dfdb34
[DEBUG] 2020-04-06 09:30:44.168 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration timestamp -> org.hibernate.type.TimestampType@4e0de145
[DEBUG] 2020-04-06 09:30:44.168 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@4e0de145
[DEBUG] 2020-04-06 09:30:44.168 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@4e0de145
[DEBUG] 2020-04-06 09:30:44.169 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@66db5964
[DEBUG] 2020-04-06 09:30:44.170 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration calendar -> org.hibernate.type.CalendarType@97fc054
[DEBUG] 2020-04-06 09:30:44.170 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@97fc054
[DEBUG] 2020-04-06 09:30:44.170 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@97fc054
[DEBUG] 2020-04-06 09:30:44.171 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1e80a570
[DEBUG] 2020-04-06 09:30:44.172 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration locale -> org.hibernate.type.LocaleType@694c0f4a
[DEBUG] 2020-04-06 09:30:44.172 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@694c0f4a
[DEBUG] 2020-04-06 09:30:44.173 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration currency -> org.hibernate.type.CurrencyType@dd1b9a9
[DEBUG] 2020-04-06 09:30:44.173 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@dd1b9a9
[DEBUG] 2020-04-06 09:30:44.174 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6a3e9d74
[DEBUG] 2020-04-06 09:30:44.174 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6a3e9d74
[DEBUG] 2020-04-06 09:30:44.174 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration class -> org.hibernate.type.ClassType@51b83f33
[DEBUG] 2020-04-06 09:30:44.174 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@51b83f33
[DEBUG] 2020-04-06 09:30:44.175 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@3b89b0f0
[DEBUG] 2020-04-06 09:30:44.175 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@3b89b0f0
[DEBUG] 2020-04-06 09:30:44.176 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@777c644f
[DEBUG] 2020-04-06 09:30:44.177 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration binary -> org.hibernate.type.BinaryType@4dec3c86
[DEBUG] 2020-04-06 09:30:44.177 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration byte[] -> org.hibernate.type.BinaryType@4dec3c86
[DEBUG] 2020-04-06 09:30:44.177 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration [B -> org.hibernate.type.BinaryType@4dec3c86
[DEBUG] 2020-04-06 09:30:44.177 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@735e08e2
[DEBUG] 2020-04-06 09:30:44.177 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@735e08e2
[DEBUG] 2020-04-06 09:30:44.178 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@735e08e2
[DEBUG] 2020-04-06 09:30:44.179 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration row_version -> org.hibernate.type.RowVersionType@15c6e8f5
[DEBUG] 2020-04-06 09:30:44.179 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration image -> org.hibernate.type.ImageType@6111d7dc
[DEBUG] 2020-04-06 09:30:44.180 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration characters -> org.hibernate.type.CharArrayType@5cf1fde6
[DEBUG] 2020-04-06 09:30:44.180 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration char[] -> org.hibernate.type.CharArrayType@5cf1fde6
[DEBUG] 2020-04-06 09:30:44.180 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration [C -> org.hibernate.type.CharArrayType@5cf1fde6
[DEBUG] 2020-04-06 09:30:44.181 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@6be90f2d
[DEBUG] 2020-04-06 09:30:44.181 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@6be90f2d
[DEBUG] 2020-04-06 09:30:44.181 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@6be90f2d
[DEBUG] 2020-04-06 09:30:44.181 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration text -> org.hibernate.type.TextType@75896896
[DEBUG] 2020-04-06 09:30:44.182 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration ntext -> org.hibernate.type.NTextType@1db7c4fe
[DEBUG] 2020-04-06 09:30:44.183 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration blob -> org.hibernate.type.BlobType@1df79553
[DEBUG] 2020-04-06 09:30:44.183 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1df79553
[DEBUG] 2020-04-06 09:30:44.183 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@73c52397
[DEBUG] 2020-04-06 09:30:44.184 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration clob -> org.hibernate.type.ClobType@8d82d15
[DEBUG] 2020-04-06 09:30:44.185 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@8d82d15
[DEBUG] 2020-04-06 09:30:44.186 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration nclob -> org.hibernate.type.NClobType@3c949861
[DEBUG] 2020-04-06 09:30:44.186 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@3c949861
[DEBUG] 2020-04-06 09:30:44.186 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1421f231
[DEBUG] 2020-04-06 09:30:44.186 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@2c938a3e
[DEBUG] 2020-04-06 09:30:44.187 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration serializable -> org.hibernate.type.SerializableType@25adf2cf
[DEBUG] 2020-04-06 09:30:44.190 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration object -> org.hibernate.type.ObjectType@5e699d5e
[DEBUG] 2020-04-06 09:30:44.190 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@5e699d5e
[DEBUG] 2020-04-06 09:30:44.190 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@70f4eba
[DEBUG] 2020-04-06 09:30:44.190 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@2b959488
[DEBUG] 2020-04-06 09:30:44.190 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@61ba4bcd
[DEBUG] 2020-04-06 09:30:44.191 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1d52aa2
[DEBUG] 2020-04-06 09:30:44.191 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@7c52cebc
[DEBUG] 2020-04-06 09:30:44.191 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@7b64346a
[DEBUG] 2020-04-06 09:30:44.191 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@4833ece8
[DEBUG] 2020-04-06 09:30:44.191 [http-nio-8080-exec-2] BasicTypeRegistry - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@601b5f76
[DEBUG] 2020-04-06 09:30:44.216 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
[DEBUG] 2020-04-06 09:30:44.216 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
[DEBUG] 2020-04-06 09:30:44.217 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 2020-04-06 09:30:44.217 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
[DEBUG] 2020-04-06 09:30:44.217 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
[DEBUG] 2020-04-06 09:30:44.218 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
[DEBUG] 2020-04-06 09:30:44.219 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
[DEBUG] 2020-04-06 09:30:44.220 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 2020-04-06 09:30:44.220 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
[DEBUG] 2020-04-06 09:30:44.221 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
[DEBUG] 2020-04-06 09:30:44.221 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
[DEBUG] 2020-04-06 09:30:44.221 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
[DEBUG] 2020-04-06 09:30:44.222 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
[DEBUG] 2020-04-06 09:30:44.222 [http-nio-8080-exec-2] DefaultIdentifierGeneratorFactory - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
[WARN ] 2020-04-06 09:30:44.225 [http-nio-8080-exec-2] ConnectionProviderInitiator - HHH000022: c3p0 properties were encountered, but the c3p0 provider class was not found on the classpath; these properties are going to be ignored.
[WARN ] 2020-04-06 09:30:44.228 [http-nio-8080-exec-2] pooling - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
[INFO ] 2020-04-06 09:30:44.231 [http-nio-8080-exec-2] pooling - HHH10001005: using driver [com.mysql.cj.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/blog]
[INFO ] 2020-04-06 09:30:44.231 [http-nio-8080-exec-2] pooling - HHH10001001: Connection properties: {password=jeyTesting12, user=tester}
[INFO ] 2020-04-06 09:30:44.231 [http-nio-8080-exec-2] pooling - HHH10001003: Autocommit mode: false
[DEBUG] 2020-04-06 09:30:44.234 [http-nio-8080-exec-2] DriverManagerConnectionProviderImpl - Initializing Connection pool with 1 Connections
[INFO ] 2020-04-06 09:30:44.234 [http-nio-8080-exec-2] DriverManagerConnectionProviderImpl - HHH000115: Hibernate connection pool size: 20 (min=1)
[DEBUG] 2020-04-06 09:30:44.516 [http-nio-8080-exec-2] JdbcEnvironmentInitiator - Database ->
       name : MySQL
    version : 8.0.19
      major : 8
      minor : 0
[DEBUG] 2020-04-06 09:30:44.517 [http-nio-8080-exec-2] JdbcEnvironmentInitiator - Driver ->
       name : MySQL Connector/J
    version : mysql-connector-java-8.0.17 (Revision: 16a712ddb3f826a1933ab42b0039f7fb9eebc6ec)
      major : 8
      minor : 0
[DEBUG] 2020-04-06 09:30:44.517 [http-nio-8080-exec-2] JdbcEnvironmentInitiator - JDBC version : 4.2
[INFO ] 2020-04-06 09:30:44.533 [http-nio-8080-exec-2] Dialect - HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
[DEBUG] 2020-04-06 09:30:44.549 [http-nio-8080-exec-2] IdentifierHelperBuilder - JDBC driver metadata reported database stores quoted identifiers in more than one case
[DEBUG] 2020-04-06 09:30:44.566 [http-nio-8080-exec-2] IdentifierHelperBuilder - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [MIXED]; that will likely lead to problems in schema update and validation if using quoted identifiers
[DEBUG] 2020-04-06 09:30:44.599 [http-nio-8080-exec-2] Namespace - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
[DEBUG] 2020-04-06 09:30:44.602 [http-nio-8080-exec-2] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@52c3bc45] to MetadataBuildingContext [org.hibernate.boot.internal.MetadataBuildingContextRootImpl@7edd0c6c]
[DEBUG] 2020-04-06 09:30:44.647 [http-nio-8080-exec-2] AnnotationBinder - Binding entity from annotated class: com.jeyblog.entity.Post
[DEBUG] 2020-04-06 09:30:44.670 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
[DEBUG] 2020-04-06 09:30:44.675 [http-nio-8080-exec-2] EntityBinder - Import with entity name Post
[DEBUG] 2020-04-06 09:30:44.678 [http-nio-8080-exec-2] EntityBinder - Bind entity com.jeyblog.entity.Post on table Post
[DEBUG] 2020-04-06 09:30:44.703 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=post_id, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.707 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property postId with lazy=false
[DEBUG] 2020-04-06 09:30:44.709 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:postId]
[DEBUG] 2020-04-06 09:30:44.711 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for postId
[DEBUG] 2020-04-06 09:30:44.713 [http-nio-8080-exec-2] PropertyBinder - Building property postId
[DEBUG] 2020-04-06 09:30:44.716 [http-nio-8080-exec-2] BinderHelper - #makeIdGenerator(org.hibernate.mapping.SimpleValue([org.hibernate.mapping.Column(post_id)]), postId, org.hibernate.id.enhanced.SequenceStyleGenerator, native, ...)
[DEBUG] 2020-04-06 09:30:44.719 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=author, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.719 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property author with lazy=false
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:author]
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for author
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] PropertyBinder - Building property author
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=category, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property category with lazy=false
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:category]
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for category
[DEBUG] 2020-04-06 09:30:44.720 [http-nio-8080-exec-2] PropertyBinder - Building property category
[DEBUG] 2020-04-06 09:30:44.721 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=created_at, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.721 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property createdAt with lazy=false
[DEBUG] 2020-04-06 09:30:44.721 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:createdAt]
[DEBUG] 2020-04-06 09:30:44.721 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for createdAt
[DEBUG] 2020-04-06 09:30:44.721 [http-nio-8080-exec-2] PropertyBinder - Building property createdAt
[DEBUG] 2020-04-06 09:30:44.729 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=description, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.729 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property description with lazy=false
[DEBUG] 2020-04-06 09:30:44.729 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:description]
[DEBUG] 2020-04-06 09:30:44.729 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for description
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] PropertyBinder - Building property description
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=publication_date, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property pubDate with lazy=false
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:pubDate]
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for pubDate
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] PropertyBinder - Building property pubDate
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=title, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property title with lazy=false
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:title]
[DEBUG] 2020-04-06 09:30:44.730 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for title
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] PropertyBinder - Building property title
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] Ejb3Column - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Post), mappingColumn=updated_at, insertable=true, updatable=true, unique=false}
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] PropertyBinder - MetadataSourceProcessor property updatedAt with lazy=false
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] AbstractPropertyHolder - Attempting to locate auto-apply AttributeConverter for property [com.jeyblog.entity.Post:updatedAt]
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] SimpleValueBinder - building SimpleValue for updatedAt
[DEBUG] 2020-04-06 09:30:44.731 [http-nio-8080-exec-2] PropertyBinder - Building property updatedAt
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for postId
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for author
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for category
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for createdAt
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for description
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for pubDate
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for title
[DEBUG] 2020-04-06 09:30:44.734 [http-nio-8080-exec-2] SimpleValueBinder - Starting fillSimpleValue for updatedAt
[DEBUG] 2020-04-06 09:30:44.736 [http-nio-8080-exec-2] PrimaryKey - Forcing column [post_id] to be non-null as it is part of the primary key for table [post]
[DEBUG] 2020-04-06 09:30:44.774 [http-nio-8080-exec-2] SessionFactoryImpl - Building session factory
[DEBUG] 2020-04-06 09:30:44.775 [http-nio-8080-exec-2] Settings - SessionFactory name : null
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Automatic flush during beforeCompletion(): enabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Automatic session close at end of transaction: disabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Statistics: disabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Deleted entity synthetic identifier rollback: disabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Default entity-mode: pojo
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Allow initialization of lazy state outside session : disabled
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Using BatchFetchStyle : LEGACY
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Default batch fetch size: -1
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Maximum outer join fetch depth: 2
[DEBUG] 2020-04-06 09:30:44.777 [http-nio-8080-exec-2] Settings - Default null ordering: NONE
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Order SQL updates by primary key: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Order SQL inserts for batching: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - multi-tenancy strategy : NONE
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - JTA Track by Thread: enabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Query language substitutions: {}
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Named query checking : enabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Second-level cache: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Second-level query cache: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Second-level query cache factory: null
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Second-level cache region prefix: null
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Optimize second-level cache for minimal puts: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Structured second-level cache entries: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Second-level cache direct-reference entries: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Automatic eviction of collection cache: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - JDBC batch size: 15
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - JDBC batch updates for versioned data: enabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Scrollable result sets: enabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - Wrap result sets: disabled
[DEBUG] 2020-04-06 09:30:44.778 [http-nio-8080-exec-2] Settings - JDBC3 getGeneratedKeys(): enabled
[DEBUG] 2020-04-06 09:30:44.780 [http-nio-8080-exec-2] Settings - JDBC result set fetch size: null
[DEBUG] 2020-04-06 09:30:44.780 [http-nio-8080-exec-2] Settings - Connection release mode: AFTER_TRANSACTION
[DEBUG] 2020-04-06 09:30:44.781 [http-nio-8080-exec-2] Settings - Generate SQL with comments: disabled
[DEBUG] 2020-04-06 09:30:44.781 [http-nio-8080-exec-2] Settings - JPA compliance - query : 
[DEBUG] 2020-04-06 09:30:44.781 [http-nio-8080-exec-2] Settings - JPA compliance - closed-handling : 
[DEBUG] 2020-04-06 09:30:44.781 [http-nio-8080-exec-2] Settings - JPA compliance - lists : 
[DEBUG] 2020-04-06 09:30:44.781 [http-nio-8080-exec-2] Settings - JPA compliance - transactions : 
[INFO ] 2020-04-06 09:30:44.845 [http-nio-8080-exec-2] beans - HHH10005002: No explicit CDI BeanManager reference was passed to Hibernate, but CDI is available on the Hibernate ClassLoader.
[DEBUG] 2020-04-06 09:30:44.864 [http-nio-8080-exec-2] SessionFactoryImpl - Session factory constructed with filter configurations : {}
[DEBUG] 2020-04-06 09:30:44.864 [http-nio-8080-exec-2] SessionFactoryImpl - Instantiating session factory with properties: {awt.toolkit=sun.awt.X11.XToolkit, java.specification.version=11, sun.cpu.isalist=, hibernate.c3p0.idle_test_period=3000, sun.jnu.encoding=UTF-8, hibernate.c3p0.min_size=5, sun.arch.data.model=64, java.vendor.url=https://ubuntu.com/, catalina.useNaming=true, openejb.provider.default=org.apache.tomee, sun.boot.library.path=/usr/lib/jvm/java-11-openjdk-amd64/lib, com.sun.management.jmxremote.ssl=false, sun.java.command=org.apache.catalina.startup.Bootstrap start, jdk.debug=release, java.specification.vendor=Oracle Corporation, java.naming.factory.url.pkgs=org.apache.naming:org.apache.openejb.core.ivm.naming, openejb.embedder.source=ServerListener, java.version.date=2020-01-14, java.home=/usr/lib/jvm/java-11-openjdk-amd64, ignore.endorsed.dirs=, file.separator=/, java.vm.compressedOopsMode=32-bit, line.separator=
, hibernate.c3p0.timeout=300, java.specification.name=Java Platform API Specification, java.vm.specification.vendor=Oracle Corporation, openejb.scan.webapp.container=true, com.sun.management.jmxremote.password.file=/home/student/.IntelliJIdea2019.3/system/tomcat/Unnamed_jey-blog/jmxremote.password, package.definition=sun.,java.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.naming.,org.apache.tomcat., openejb.deployments.classpath.filter.systemapps=false, jdk.tls.ephemeralDHKeySize=2048, java.util.logging.config.file=/home/student/.IntelliJIdea2019.3/system/tomcat/Unnamed_jey-blog/conf/logging.properties, java.protocol.handler.pkgs=org.apache.catalina.webresources, connection.password=jeyTesting12, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, openejb.scan.webapp.container.excludes=, java.runtime.version=11.0.6+10-post-Ubuntu-1ubuntu118.04.1, user.name=student, org.apache.johnzon.max-string-length=8192, file.encoding=UTF-8, derby.system.home=/home/student/tomcat/bin, org.apache.catalina.security.SecurityListener.UMASK=0027, hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver, java.io.tmpdir=/home/student/tomcat/temp, tomcat.util.scan.StandardJarScanFilter.jarsToScan=log4j-taglib*.jar,log4j-web*.jar,log4javascript*.jar,slf4j-taglib*.jar, java.version=11.0.6, com.sun.management.jmxremote.port=1099, tomcat.util.scan.StandardJarScanFilter.jarsToSkip=annotations-api.jar,ant-junit*.jar,ant-launcher.jar,ant.jar,asm-*.jar,aspectj*.jar,bootstrap.jar,catalina-ant.jar,catalina-ha.jar,catalina-jmx-remote.jar,catalina-storeconfig.jar,catalina-tribes.jar,catalina-ws.jar,catalina.jar,cglib-*.jar,cobertura-*.jar,commons-beanutils*.jar,commons-codec*.jar,commons-collections*.jar,commons-daemon.jar,commons-dbcp*.jar,commons-digester*.jar,commons-fileupload*.jar,commons-httpclient*.jar,commons-io*.jar,commons-lang*.jar,commons-logging*.jar,commons-math*.jar,commons-pool*.jar,dom4j-*.jar,easymock-*.jar,ecj-*.jar,el-api.jar,geronimo-spec-jaxrpc*.jar,h2*.jar,hamcrest-*.jar,hibernate*.jar,httpclient*.jar,icu4j-*.jar,jasper-el.jar,jasper.jar,jaspic-api.jar,jaxb-*.jar,jaxen-*.jar,jdom-*.jar,jetty-*.jar,jmx-tools.jar,jmx.jar,jsp-api.jar,jstl.jar,jta*.jar,junit-*.jar,junit.jar,log4j*.jar,mail*.jar,objenesis-*.jar,oraclepki.jar,oro-*.jar,servlet-api-*.jar,servlet-api.jar,slf4j*.jar,taglibs-standard-spec-*.jar,tagsoup-*.jar,tomcat-api.jar,tomcat-coyote.jar,tomcat-dbcp.jar,tomcat-i18n-*.jar,tomcat-jdbc.jar,tomcat-jni.jar,tomcat-juli-adapters.jar,tomcat-juli.jar,tomcat-util-scan.jar,tomcat-util.jar,tomcat-websocket.jar,tools.jar,websocket-api.jar,wsdl4j*.jar,xercesImpl.jar,xml-apis.jar,xmlParserAPIs-*.jar,xmlParserAPIs.jar,xom-*.jar, connection.username=tester, java.vm.specification.name=Java Virtual Machine Specification, java.awt.printerjob=sun.print.PSPrinterJob, sun.os.patch.level=unknown, connection.driver_class=com.mysql.cj.jdbc.Driver, tomcat.built=May 4 2019 09:17:16 UTC, java.library.path=/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib, java.vendor=Ubuntu, tomee.version=7.1.1, java.rmi.server.randomIDs=true, sun.io.unicode.encoding=UnicodeLittle, tomcat.util.buf.StringCache.byte.enabled=true, sun.desktop=gnome, java.class.path=/home/student/tomcat/bin/bootstrap.jar:/home/student/tomcat/bin/tomcat-juli.jar, tomcat.version=8.5.41.0, java.vm.vendor=Ubuntu, openejb.home=/home/student/tomcat, openejb.system.apps=true, user.timezone=America/Chicago, os.name=Linux, java.vm.specification.version=11, sun.java.launcher=SUN_STANDARD, user.country=US, openejb.base=/home/student/.IntelliJIdea2019.3/system/tomcat/Unnamed_jey-blog, com.sun.management.jmxremote=, sun.cpu.endian=little, user.home=/home/student, hibernate.c3p0.max_statements=50, user.language=en, openejb.deployments.classpath=false, java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment, package.access=sun.,org.apache.catalina.,org.apache.coyote.,org.apache.jasper.,org.apache.tomcat., openejb.loader=tomcat-system, server.loader=, com.sun.management.jmxremote.access.file=/home/student/.IntelliJIdea2019.3/system/tomcat/Unnamed_jey-blog/jmxremote.access, hibernate.c3p0.max_size=20, java.naming.factory.initial=org.apache.naming.java.javaURLContextFactory, path.separator=:, org.apache.openejb.core.security.JaccProvider=org.apache.openejb.core.security.jacc.BasicJaccProvider, common.loader="/home/student/tomcat/lib","/home/student/tomcat/lib/*.jar","/home/student/tomcat/lib","/home/student/tomcat/lib/*.jar", hibernate.connection.username=****, os.version=5.3.0-45-generic, openejb.version=7.1.1, org.apache.security.jacc.EJBMethodPermission.methodInterfaces=BusinessLocalHome,BusinessRemoteHome,BusinessRemote,BusinessLocal, java.runtime.name=OpenJDK Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/blog, java.vm.name=OpenJDK 64-Bit Server VM, openejb.scan.webapp.container.includes=.*(geronimo|mp-jwt|failsafe).*, java.vendor.url.bug=https://bugs.launchpad.net/ubuntu/+source/openjdk-lts, tomee.remote.support=true, catalina.home=/home/student/tomcat, user.dir=/home/student/tomcat/bin, bval.in-container=true, os.arch=amd64, openjpa.Log=org.apache.openejb.openjpa.JULOpenJPALogFactory, hibernate.connection.password=****, tomee.serialization.class.blacklist=-, tomee.serialization.class.whitelist=, shared.loader=, catalina.base=/home/student/.IntelliJIdea2019.3/system/tomcat/Unnamed_jey-blog, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@1a6ded57, noBanner=true, java.util.logging.manager=org.apache.juli.ClassLoaderLogManager, org.apache.webbeans.logger.WebBeansLoggerFacade=org.apache.openejb.cdi.logging.ContainerJULLoggerFactory, java.vm.info=mixed mode, sharing, java.vm.version=11.0.6+10-post-Ubuntu-1ubuntu118.04.1, hibernate.bytecode.use_reflection_optimizer=false, java.rmi.server.hostname=127.0.0.1, javax.security.jacc.PolicyConfigurationFactory.provider=org.apache.openejb.core.security.JaccProvider$Factory, connection.url=jdbc:mysql://localhost:3306/blog, java.class.version=55.0, authconfigprovider.factory=false}
[DEBUG] 2020-04-06 09:30:44.881 [http-nio-8080-exec-2] ClassLoaderAccessImpl - Not known whether passed class name [com.jeyblog.entity.Post] is safe
[DEBUG] 2020-04-06 09:30:44.881 [http-nio-8080-exec-2] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.jeyblog.entity.Post
[DEBUG] 2020-04-06 09:30:44.893 [http-nio-8080-exec-2] JaccIntegrator - Skipping JACC integration as it was not enabled
[DEBUG] 2020-04-06 09:30:44.894 [http-nio-8080-exec-2] SessionFactoryImpl - Instantiated session factory
[DEBUG] 2020-04-06 09:30:44.894 [http-nio-8080-exec-2] TypeConfiguration$Scope - Scoping TypeConfiguration [org.hibernate.type.spi.TypeConfiguration@52c3bc45] to SessionFactoryImpl [org.hibernate.internal.SessionFactoryImpl@1b47fcf5]
[DEBUG] 2020-04-06 09:30:44.942 [http-nio-8080-exec-2] ClassLoaderAccessImpl - Not known whether passed class name [com.jeyblog.entity.Post] is safe
[DEBUG] 2020-04-06 09:30:44.945 [http-nio-8080-exec-2] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.jeyblog.entity.Post
[DEBUG] 2020-04-06 09:30:44.961 [http-nio-8080-exec-2] ClassLoaderAccessImpl - Not known whether passed class name [com.jeyblog.entity.Post] is safe
[DEBUG] 2020-04-06 09:30:44.961 [http-nio-8080-exec-2] ClassLoaderAccessImpl - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : com.jeyblog.entity.Post
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister - Static SQL for entity: com.jeyblog.entity.Post
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Version select: select post_id from Post where post_id =?
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Snapshot select: select post_.post_id, post_.author as author2_0_, post_.category as category3_0_, post_.created_at as created_4_0_, post_.description as descript5_0_, post_.publication_date as publicat6_0_, post_.title as title7_0_, post_.updated_at as updated_8_0_ from Post post_ where post_.post_id=?
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Insert 0: insert into Post (author, category, created_at, description, publication_date, title, updated_at, post_id) values (?, ?, ?, ?, ?, ?, ?, ?)
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Update 0: update Post set author=?, category=?, created_at=?, description=?, publication_date=?, title=?, updated_at=? where post_id=?
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Delete 0: delete from Post where post_id=?
[DEBUG] 2020-04-06 09:30:45.146 [http-nio-8080-exec-2] AbstractEntityPersister -  Identity insert: insert into Post (author, category, created_at, description, publication_date, title, updated_at) values (?, ?, ?, ?, ?, ?, ?)
[DEBUG] 2020-04-06 09:30:45.167 [http-nio-8080-exec-2] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6f1d3845]
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : author
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : category
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : createdAt
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : description
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : pubDate
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : title
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : updatedAt
[DEBUG] 2020-04-06 09:30:45.168 [http-nio-8080-exec-2] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 2020-04-06 09:30:45.179 [http-nio-8080-exec-2] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 2020-04-06 09:30:45.183 [http-nio-8080-exec-2] LoadPlanTreePrinter - LoadPlan(entity=com.jeyblog.entity.Post)
    - Returns
       - EntityReturnImpl(entity=com.jeyblog.entity.Post, querySpaceUid=<gen:0>, path=com.jeyblog.entity.Post)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.jeyblog.entity.Post)
          - SQL table alias mapping - post0_
          - alias suffix - 0_
          - suffixed key columns - {post_id1_0_0_}

[DEBUG] 2020-04-06 09:30:45.184 [http-nio-8080-exec-2] EntityLoader - Static select for entity com.jeyblog.entity.Post [NONE]: select post0_.post_id as post_id1_0_0_, post0_.author as author2_0_0_, post0_.category as category3_0_0_, post0_.created_at as created_4_0_0_, post0_.description as descript5_0_0_, post0_.publication_date as publicat6_0_0_, post0_.title as title7_0_0_, post0_.updated_at as updated_8_0_0_ from Post post0_ where post0_.post_id=?
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] QuerySpacesImpl - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@72241ace]
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : author
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : category
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : createdAt
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : description
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : pubDate
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : title
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] MetamodelGraphWalker - Visiting attribute path : updatedAt
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] FetchStyleLoadPlanBuildingAssociationVisitationStrategy - Building LoadPlan...
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] LoadQueryJoinAndFetchProcessor - processing queryspace <gen:0>
[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] LoadPlanTreePrinter - LoadPlan(entity=com.jeyblog.entity.Post)
    - Returns
       - EntityReturnImpl(entity=com.jeyblog.entity.Post, querySpaceUid=<gen:0>, path=com.jeyblog.entity.Post)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=com.jeyblog.entity.Post)
          - SQL table alias mapping - post0_
          - alias suffix - 0_
          - suffixed key columns - {post_id1_0_0_}

[DEBUG] 2020-04-06 09:30:45.185 [http-nio-8080-exec-2] EntityLoader - Static select for entity com.jeyblog.entity.Post [READ]: select post0_.post_id as post_id1_0_0_, post0_.author as author2_0_0_, post0_.category as category3_0_0_, post0_.created_at as created_4_0_0_, post0_.description as descript5_0_0_, post0_.publication_date as publicat6_0_0_, post0_.title as title7_0_0_, post0_.updated_at as updated_8_0_0_ from Post post0_ where post0_.post_id=?
[DEBUG] 2020-04-06 09:30:45.200 [http-nio-8080-exec-2] Loader - Static select for action ACTION_MERGE on entity com.jeyblog.entity.Post: select post0_.post_id as post_id1_0_0_, post0_.author as author2_0_0_, post0_.category as category3_0_0_, post0_.created_at as created_4_0_0_, post0_.description as descript5_0_0_, post0_.publication_date as publicat6_0_0_, post0_.title as title7_0_0_, post0_.updated_at as updated_8_0_0_ from Post post0_ where post0_.post_id=?
[DEBUG] 2020-04-06 09:30:45.201 [http-nio-8080-exec-2] Loader - Static select for action ACTION_REFRESH on entity com.jeyblog.entity.Post: select post0_.post_id as post_id1_0_0_, post0_.author as author2_0_0_, post0_.category as category3_0_0_, post0_.created_at as created_4_0_0_, post0_.description as descript5_0_0_, post0_.publication_date as publicat6_0_0_, post0_.title as title7_0_0_, post0_.updated_at as updated_8_0_0_ from Post post0_ where post0_.post_id=?
[DEBUG] 2020-04-06 09:30:45.230 [http-nio-8080-exec-2] SchemaManagementToolCoordinator - No actions specified; doing nothing
[DEBUG] 2020-04-06 09:30:45.230 [http-nio-8080-exec-2] JtaPlatformInitiator - No JtaPlatform was specified, checking resolver
[DEBUG] 2020-04-06 09:30:45.230 [http-nio-8080-exec-2] JtaPlatformResolverInitiator - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
[DEBUG] 2020-04-06 09:30:45.241 [http-nio-8080-exec-2] StandardJtaPlatformResolver - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[INFO ] 2020-04-06 09:30:45.241 [http-nio-8080-exec-2] JtaPlatformInitiator - HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
[DEBUG] 2020-04-06 09:30:45.242 [http-nio-8080-exec-2] NamedQueryRepository - Checking 0 named HQL queries
[DEBUG] 2020-04-06 09:30:45.242 [http-nio-8080-exec-2] NamedQueryRepository - Checking 0 named SQL queries
[DEBUG] 2020-04-06 09:30:45.243 [http-nio-8080-exec-2] SessionFactoryRegistry - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@604aaab9
[DEBUG] 2020-04-06 09:30:45.245 [http-nio-8080-exec-2] SessionFactoryRegistry - Registering SessionFactory: e1b2e6b9-7596-4c8a-8411-478adf2ed906 (<unnamed>)
[DEBUG] 2020-04-06 09:30:45.245 [http-nio-8080-exec-2] SessionFactoryRegistry - Not binding SessionFactory to JNDI, no JNDI name configured
[DEBUG] 2020-04-06 09:30:45.310 [http-nio-8080-exec-2] StatisticsInitiator - Statistics initialized [enabled=false]
[DEBUG] 2020-04-06 09:30:45.342 [http-nio-8080-exec-2] CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from Post as generatedAlias0
[DEBUG] 2020-04-06 09:30:45.357 [http-nio-8080-exec-2] QueryTranslatorFactoryInitiator - QueryTranslatorFactory: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@5bc2957e
[DEBUG] 2020-04-06 09:30:45.377 [http-nio-8080-exec-2] QueryTranslatorImpl - parse() - HQL: select generatedAlias0 from com.jeyblog.entity.Post as generatedAlias0
[DEBUG] 2020-04-06 09:30:45.381 [http-nio-8080-exec-2] ErrorTracker - throwQueryException() : no errors
[DEBUG] 2020-04-06 09:30:45.391 [http-nio-8080-exec-2] QueryTranslatorImpl - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  \-[IDENT] Node: 'jeyblog'
       |     |  |  \-[IDENT] Node: 'entity'
       |     |  \-[IDENT] Node: 'Post'
       |     \-[ALIAS] Node: 'generatedAlias0'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'generatedAlias0'

[DEBUG] 2020-04-06 09:30:45.409 [http-nio-8080-exec-2] HqlSqlBaseWalker - select << begin [level=1, statement=select]
[DEBUG] 2020-04-06 09:30:45.423 [http-nio-8080-exec-2] FromElement - FromClause{level=1} : com.jeyblog.entity.Post (generatedAlias0) -> post0_
[DEBUG] 2020-04-06 09:30:45.424 [http-nio-8080-exec-2] FromReferenceNode - Resolved : generatedAlias0 -> post0_.post_id
[DEBUG] 2020-04-06 09:30:45.425 [http-nio-8080-exec-2] HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
[DEBUG] 2020-04-06 09:30:45.425 [http-nio-8080-exec-2] HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} post0_.post_id ) ( FromClause{level=1} Post post0_ ) )
[DEBUG] 2020-04-06 09:30:45.438 [http-nio-8080-exec-2] JoinProcessor - Using FROM fragment [Post post0_]
[DEBUG] 2020-04-06 09:30:45.438 [http-nio-8080-exec-2] HqlSqlBaseWalker - select >> end [level=1, statement=select]
[DEBUG] 2020-04-06 09:30:45.439 [http-nio-8080-exec-2] QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Post)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'post0_.post_id as post_id1_0_' {alias=generatedAlias0, className=com.jeyblog.entity.Post, tableAlias=post0_}
    |  \-[SQL_TOKEN] SqlFragment: 'post0_.author as author2_0_, post0_.category as category3_0_, post0_.created_at as created_4_0_, post0_.description as descript5_0_, post0_.publication_date as publicat6_0_, post0_.title as title7_0_, post0_.updated_at as updated_8_0_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[post0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Post post0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=Post,tableAlias=post0_,origin=null,columns={,className=com.jeyblog.entity.Post}}

[DEBUG] 2020-04-06 09:30:45.439 [http-nio-8080-exec-2] ErrorTracker - throwQueryException() : no errors
[DEBUG] 2020-04-06 09:30:45.444 [http-nio-8080-exec-2] QueryTranslatorImpl - HQL: select generatedAlias0 from com.jeyblog.entity.Post as generatedAlias0
[DEBUG] 2020-04-06 09:30:45.444 [http-nio-8080-exec-2] QueryTranslatorImpl - SQL: select post0_.post_id as post_id1_0_, post0_.author as author2_0_, post0_.category as category3_0_, post0_.created_at as created_4_0_, post0_.description as descript5_0_, post0_.publication_date as publicat6_0_, post0_.title as title7_0_, post0_.updated_at as updated_8_0_ from Post post0_
[DEBUG] 2020-04-06 09:30:45.444 [http-nio-8080-exec-2] ErrorTracker - throwQueryException() : no errors
[DEBUG] 2020-04-06 09:30:45.458 [http-nio-8080-exec-2] SQL - select post0_.post_id as post_id1_0_, post0_.author as author2_0_, post0_.category as category3_0_, post0_.created_at as created_4_0_, post0_.description as descript5_0_, post0_.publication_date as publicat6_0_, post0_.title as title7_0_, post0_.updated_at as updated_8_0_ from Post post0_
[DEBUG] 2020-04-06 09:30:45.471 [http-nio-8080-exec-2] Loader - Result set row: 0
[DEBUG] 2020-04-06 09:30:45.474 [http-nio-8080-exec-2] Loader - Result row: EntityKey[com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:45.481 [http-nio-8080-exec-2] Loader - Result set row: 1
[DEBUG] 2020-04-06 09:30:45.482 [http-nio-8080-exec-2] Loader - Result row: EntityKey[com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:45.482 [http-nio-8080-exec-2] Loader - Result set row: 2
[DEBUG] 2020-04-06 09:30:45.482 [http-nio-8080-exec-2] Loader - Result row: EntityKey[com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:45.483 [http-nio-8080-exec-2] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `author` : value = James
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `category` : value = Education
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `description` : value = Hibernate ORM is concerned with helping your application to achieve persistence.
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `title` : value = How to create a generic Dao
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.484 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `author` : value = Henry
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `category` : value = Education
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `description` : value = So what is persistence? Persistence simply means that we would like our application’s data to outlive the applications process.
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `title` : value = Hibernate
[DEBUG] 2020-04-06 09:30:45.485 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `author` : value = Chantal
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `category` : value = Politics
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `description` : value =  Representational state transfer is a software architectural style that defines a set of constraints to be used for creating Web services. Web services that conform to the REST architectural style, called RESTful Web services, provide interoperability between computer systems on the Internet.
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `title` : value = REST API
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:45.486 [http-nio-8080-exec-2] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:45.488 [http-nio-8080-exec-2] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[DEBUG] 2020-04-06 09:30:51.973 [http-nio-8080-exec-5] CriteriaQueryImpl - Rendered criteria query -> select generatedAlias0 from Post as generatedAlias0
[DEBUG] 2020-04-06 09:30:51.974 [http-nio-8080-exec-5] SQL - select post0_.post_id as post_id1_0_, post0_.author as author2_0_, post0_.category as category3_0_, post0_.created_at as created_4_0_, post0_.description as descript5_0_, post0_.publication_date as publicat6_0_, post0_.title as title7_0_, post0_.updated_at as updated_8_0_ from Post post0_
[DEBUG] 2020-04-06 09:30:51.976 [http-nio-8080-exec-5] Loader - Result set row: 0
[DEBUG] 2020-04-06 09:30:51.976 [http-nio-8080-exec-5] Loader - Result row: EntityKey[com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:51.977 [http-nio-8080-exec-5] Loader - Result set row: 1
[DEBUG] 2020-04-06 09:30:51.977 [http-nio-8080-exec-5] Loader - Result row: EntityKey[com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:51.977 [http-nio-8080-exec-5] Loader - Result set row: 2
[DEBUG] 2020-04-06 09:30:51.977 [http-nio-8080-exec-5] Loader - Result row: EntityKey[com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:51.977 [http-nio-8080-exec-5] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `author` : value = James
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `category` : value = Education
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `description` : value = Hibernate ORM is concerned with helping your application to achieve persistence.
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `title` : value = How to create a generic Dao
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#1]
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `author` : value = Henry
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `category` : value = Education
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `description` : value = So what is persistence? Persistence simply means that we would like our application’s data to outlive the applications process.
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `title` : value = Hibernate
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#2]
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Resolving attributes for [com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `author` : value = Chantal
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`author`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.978 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `category` : value = Politics
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`category`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `createdAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`createdAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `description` : value =  Representational state transfer is a software architectural style that defines a set of constraints to be used for creating Web services. Web services that conform to the REST architectural style, called RESTful Web services, provide interoperability between computer systems on the Internet.
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`description`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `pubDate` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`pubDate`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `title` : value = REST API
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`title`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Processing attribute `updatedAt` : value = 2020-04-04T20:37:40
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Attribute (`updatedAt`)  - enhanced for lazy-loading? - false
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] TwoPhaseLoad - Done materializing entity [com.jeyblog.entity.Post#3]
[DEBUG] 2020-04-06 09:30:51.979 [http-nio-8080-exec-5] LogicalConnectionManagedImpl - Initiating JDBC connection release from afterTransaction
[DEBUG] 2020-04-06 09:31:14.516 [Hibernate Connection Pool Validation Thread] DriverManagerConnectionProviderImpl - Connection pool now considered primed; min-size will be maintained
